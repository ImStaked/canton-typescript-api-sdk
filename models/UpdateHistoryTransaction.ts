/**
 * Scan API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { TreeEvent } from '../models/TreeEvent';
import { HttpFile } from '../http/http';

export class UpdateHistoryTransaction {
    /**
    * The id of the update. This is not comparable to other updates; it\'s meant for correlating with server logs. 
    */
    'updateId': string;
    /**
    * The migration id of the synchronizer. 
    */
    'migrationId': number;
    /**
    * This transaction\'s Daml workflow ID; a workflow ID can be associated with multiple transactions. If empty, no workflow ID was set. 
    */
    'workflowId': string;
    /**
    * The time at which the transaction was sequenced, with microsecond resolution, using ISO-8601 representation. 
    */
    'recordTime': string;
    /**
    * The id of the synchronizer through which this transaction was sequenced. 
    */
    'synchronizerId': string;
    /**
    * Ledger effective time, using ISO-8601 representation. This is the time returned by `getTime` for all Daml executed as part of this transaction, both by the submitting participant and all confirming participants. 
    */
    'effectiveAt': string;
    /**
    * The absolute offset. Note that this field may not be the same across nodes, and therefore should not be compared between SVs. However, within a single SV\'s scan, it is monotonically, lexicographically increasing. 
    */
    'offset': string;
    /**
    * Roots of the transaction tree. These are guaranteed to occur as keys of the `events_by_id` object. 
    */
    'rootEventIds': Array<string>;
    /**
    * Changes to the ledger that were caused by this transaction, keyed by ID. Values are nodes of the transaction tree. Within a transaction, IDs may be referenced by `root_event_ids` or `child_event_ids` in `ExercisedEvent` herein. 
    */
    'eventsById': { [key: string]: TreeEvent; };

    static readonly discriminator: string | undefined = undefined;

    static readonly mapping: {[index: string]: string} | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "updateId",
            "baseName": "update_id",
            "type": "string",
            "format": ""
        },
        {
            "name": "migrationId",
            "baseName": "migration_id",
            "type": "number",
            "format": "int64"
        },
        {
            "name": "workflowId",
            "baseName": "workflow_id",
            "type": "string",
            "format": ""
        },
        {
            "name": "recordTime",
            "baseName": "record_time",
            "type": "string",
            "format": ""
        },
        {
            "name": "synchronizerId",
            "baseName": "synchronizer_id",
            "type": "string",
            "format": ""
        },
        {
            "name": "effectiveAt",
            "baseName": "effective_at",
            "type": "string",
            "format": ""
        },
        {
            "name": "offset",
            "baseName": "offset",
            "type": "string",
            "format": ""
        },
        {
            "name": "rootEventIds",
            "baseName": "root_event_ids",
            "type": "Array<string>",
            "format": ""
        },
        {
            "name": "eventsById",
            "baseName": "events_by_id",
            "type": "{ [key: string]: TreeEvent; }",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return UpdateHistoryTransaction.attributeTypeMap;
    }

    public constructor() {
    }
}
