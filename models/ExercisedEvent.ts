/**
 * Scan API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { HttpFile } from '../http/http';

export class ExercisedEvent {
    'eventType': string;
    /**
    * The ID of this particular event. Equal to the key of this element of the containing `events_by_id` if this is part of a `TreeEvent`. 
    */
    'eventId': string;
    /**
    * The ID of the created contract. 
    */
    'contractId': string;
    /**
    * The template of the created contract. 
    */
    'templateId': string;
    /**
    * The package name of the created contract. 
    */
    'packageName': string;
    /**
    * The choice that was exercised on the target contract, as an unqualified choice name, i.e. with no package or module name qualifiers. 
    */
    'choice': string;
    /**
    * The argument of the exercised choice, in the form of JSON representation of a Daml value. This is usually a record with field names being the argument names, even in the case of a single apparent choice argument, which is represented as a single-element Daml record. 
    */
    'choiceArgument': any;
    /**
    * References to further events in the same transaction that appeared as a result of this ExercisedEvent. It contains only the immediate children of this event, not all members of the subtree rooted at this node. The order of the children is the same as the event order in the transaction. 
    */
    'childEventIds': Array<string>;
    /**
    * The result of exercising the choice, as the JSON representation of a Daml value. 
    */
    'exerciseResult': any;
    /**
    * If true, the target contract may no longer be exercised. 
    */
    'consuming': boolean;
    /**
    * The parties that exercised the choice, in the form of party IDs. 
    */
    'actingParties': Array<string>;
    /**
    * The interface where the choice is defined, if inherited. 
    */
    'interfaceId'?: string;

    static readonly discriminator: string | undefined = undefined;

    static readonly mapping: {[index: string]: string} | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "eventType",
            "baseName": "event_type",
            "type": "string",
            "format": ""
        },
        {
            "name": "eventId",
            "baseName": "event_id",
            "type": "string",
            "format": ""
        },
        {
            "name": "contractId",
            "baseName": "contract_id",
            "type": "string",
            "format": ""
        },
        {
            "name": "templateId",
            "baseName": "template_id",
            "type": "string",
            "format": ""
        },
        {
            "name": "packageName",
            "baseName": "package_name",
            "type": "string",
            "format": ""
        },
        {
            "name": "choice",
            "baseName": "choice",
            "type": "string",
            "format": ""
        },
        {
            "name": "choiceArgument",
            "baseName": "choice_argument",
            "type": "any",
            "format": ""
        },
        {
            "name": "childEventIds",
            "baseName": "child_event_ids",
            "type": "Array<string>",
            "format": ""
        },
        {
            "name": "exerciseResult",
            "baseName": "exercise_result",
            "type": "any",
            "format": ""
        },
        {
            "name": "consuming",
            "baseName": "consuming",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "actingParties",
            "baseName": "acting_parties",
            "type": "Array<string>",
            "format": ""
        },
        {
            "name": "interfaceId",
            "baseName": "interface_id",
            "type": "string",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return ExercisedEvent.attributeTypeMap;
    }

    public constructor() {
    }
}
