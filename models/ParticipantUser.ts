/**
 * Common schemas for Splice API definitions
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { ParticipantUserAnnotation } from '../models/ParticipantUserAnnotation';
import { ParticipantUserRight } from '../models/ParticipantUserRight';
import { HttpFile } from '../http/http';

export class ParticipantUser {
    'id': string;
    'primaryParty'?: string;
    'rights': Array<ParticipantUserRight>;
    'isDeactivated': boolean;
    'annotations': Array<ParticipantUserAnnotation>;
    'identityProviderId'?: string;

    static readonly discriminator: string | undefined = undefined;

    static readonly mapping: {[index: string]: string} | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        {
            "name": "primaryParty",
            "baseName": "primaryParty",
            "type": "string",
            "format": ""
        },
        {
            "name": "rights",
            "baseName": "rights",
            "type": "Array<ParticipantUserRight>",
            "format": ""
        },
        {
            "name": "isDeactivated",
            "baseName": "isDeactivated",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "annotations",
            "baseName": "annotations",
            "type": "Array<ParticipantUserAnnotation>",
            "format": ""
        },
        {
            "name": "identityProviderId",
            "baseName": "identityProviderId",
            "type": "string",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return ParticipantUser.attributeTypeMap;
    }

    public constructor() {
    }
}
