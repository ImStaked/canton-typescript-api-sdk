/**
 * Scan API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { MaybeCachedContractWithState } from '../models/MaybeCachedContractWithState';
import { HttpFile } from '../http/http';

/**
* Daml contracts of the templates `Splice.Round.OpenMiningRound` and `Splice.Round.IssuingMiningRound` representing rounds for which rewards can be registered or are currently being computed, respectively. Contract IDs in the input serve as input sets for the two `MaybeCachedContractWithStateMap`s as described for that structure for `open_mining_rounds` and `issuing_mining_rounds`. 
*/
export class GetOpenAndIssuingMiningRoundsResponse {
    /**
    * Suggested cache TTL for the response; this should expire before the `opensAt` of any open rounds that may not be in this response yet. 
    */
    'timeToLiveInMicroseconds': number;
    /**
    * Always created with respect to an input set of contract IDs. If an input contract ID is absent from the keys of this map, that contract should be considered removed by the caller; if present, `contract` may be empty, reflecting that the caller should already have the full contract data for that contract ID. Contracts not present in the input set will have full contract data. `domain_id` is always up-to-date; if undefined the contract is currently unassigned to a synchronizer, i.e. \"in-flight\". 
    */
    'openMiningRounds': { [key: string]: MaybeCachedContractWithState; };
    /**
    * Always created with respect to an input set of contract IDs. If an input contract ID is absent from the keys of this map, that contract should be considered removed by the caller; if present, `contract` may be empty, reflecting that the caller should already have the full contract data for that contract ID. Contracts not present in the input set will have full contract data. `domain_id` is always up-to-date; if undefined the contract is currently unassigned to a synchronizer, i.e. \"in-flight\". 
    */
    'issuingMiningRounds': { [key: string]: MaybeCachedContractWithState; };

    static readonly discriminator: string | undefined = undefined;

    static readonly mapping: {[index: string]: string} | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "timeToLiveInMicroseconds",
            "baseName": "time_to_live_in_microseconds",
            "type": "number",
            "format": ""
        },
        {
            "name": "openMiningRounds",
            "baseName": "open_mining_rounds",
            "type": "{ [key: string]: MaybeCachedContractWithState; }",
            "format": ""
        },
        {
            "name": "issuingMiningRounds",
            "baseName": "issuing_mining_rounds",
            "type": "{ [key: string]: MaybeCachedContractWithState; }",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return GetOpenAndIssuingMiningRoundsResponse.attributeTypeMap;
    }

    public constructor() {
    }
}
