/**
 * Wallet API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { HttpFile } from '../http/http';

export class CreateBuyTrafficRequest {
    /**
    * Traffic will be purchased for the validator hosting this party. If the party is hosted on multiple participants, the request will fail with 400 Bad Request. 
    */
    'receivingValidatorPartyId': string;
    /**
    * The domain to purchase traffic for. 
    */
    'domainId': string;
    /**
    * traffic to purchase in bytes. 
    */
    'trafficAmount': number;
    /**
    * Tracking id to support exactly once submission. Once submitted, all succeessive calls with the same tracking id will get rejected with a 409 or 429 status code unless the command fails and the traffic did not get purchased. Clients should create a fresh tracking id when they try to send a new request to buy traffic. If that command submission fails with a retryable error or the application crashed and got restarted, successive command submissions must reuse the same tracking id to ensure they don\'t purchase traffic multiple times. 
    */
    'trackingId': string;
    /**
    * Expiry time of the request to buy traffic as unix timestamp in microseconds. If the request does not succeed before this time, the wallet automation will reject and expire it. Note that this time is compared against the ledger effective time of the Daml transaction accepting or expiring an offer, and can skew from the wall clock time measured on the caller\'s machine. See https://docs.daml.com/concepts/time.html for how ledger effective time is bound to the record time of a transaction on a domain. 
    */
    'expiresAt': number;

    static readonly discriminator: string | undefined = undefined;

    static readonly mapping: {[index: string]: string} | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "receivingValidatorPartyId",
            "baseName": "receiving_validator_party_id",
            "type": "string",
            "format": ""
        },
        {
            "name": "domainId",
            "baseName": "domain_id",
            "type": "string",
            "format": ""
        },
        {
            "name": "trafficAmount",
            "baseName": "traffic_amount",
            "type": "number",
            "format": "int64"
        },
        {
            "name": "trackingId",
            "baseName": "tracking_id",
            "type": "string",
            "format": ""
        },
        {
            "name": "expiresAt",
            "baseName": "expires_at",
            "type": "number",
            "format": "int64"
        }    ];

    static getAttributeTypeMap() {
        return CreateBuyTrafficRequest.attributeTypeMap;
    }

    public constructor() {
    }
}
